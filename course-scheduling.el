(defvar student-schedules-csv-file "/home/thomp/src/course-scheduling/MATH-360-FR01--22UFA--2022-08-01(1).csv")

(defun free-full-start-times-M ()
  '("8:00 AM"
    "9:00 AM"
    "10:00 AM"
    "11:00 AM"
    "12:00 PM"
    "1:00 PM"
    "2:00 PM"
    "3:00 PM"
    "4:00 PM"
    "5:00 PM"
    )
  )

(defun free-full-start-times-T ()
  '(
    "9:20 AM"
    "2:00 PM"
    "4:15 PM"
    )
  )

(defun free-full-days ()
  '("M" "T")
  )

(defun free-full-days-times ()
  (let ((rows (pcsv-parse-file student-schedules-csv-file))
	(days (free-full-days))
	;; returns float number of seconds since the epoch (0:00:00 of 1st of January 1970), in UTC timezone
	(parser (datetime-parser-to-float 'java
					  ;; This accommodates the current time format in the spreadsheet generated by reports.fresno.edu
					  "hh:mm a"
					  ))
	(begin-hour 8); 28800
	(begin-hour-datetime 28800)
	(end-hour 17)			;61200
	(end-hour-datetime 61200)
	
	)
    (let (
	  (day-field-position
	   (position-if (lambda (x) (string= x "Days"))
			(first rows)
			))
	  (start-field-position
	   (position-if (lambda (x) (string= x "Start Time"))
			(first rows)))
	  ;; each position represents a day
	  ;; the sublist for each day: each position represents an hour, beginning with 8 AM, ending at 5 PM
	  ;; value represents # of hits
	  (hits (mapcar (lambda (&rest stuff)
			  (make-list (- end-hour begin-hour) 0)
			  )
			days
			
		  )
		)


	  )
      (message "hits %s  " hits)
      ;; per student, tally slots which are empty/full
      (dotimes (day-i (length days))
	(dolist (row rows)
	  (let ((day (elt days day-i))
		(row-day (elt row day-field-position)))
	    (if (and (stringp row-day)
		     (string= day row-day))
		;; > (parse-time-string " 12:00 PM")
		;; (0 0 12 nil nil nil nil -1 nil)
		(let ((row-start-hour-datetime (funcall parser
							(string-trim (elt row start-field-position)))))
		  (setf cou-sch-dbg-r row-start-hour-datetime)
		  (setf cou-sch-dbg-h hits)
		  (if (and (numberp row-start-hour-datetime)
			   (< row-start-hour-datetime end-hour-datetime))
		      (let ((hour-i (truncate (/ (/ (- row-start-hour-datetime begin-hour-datetime)
					    60.0)
						 60.0))))
			(setf cou-sch-dbg-hr-i hour-i)
			(setf cou-sch-dbg-d-i day-i)

			;(message " %s  %s" row-start-hour begin-hour)
			(incf
			 (elt (elt hits day-i)
			      hour-i
			      )))
		    ;; encountered number outside of range -- or some other issue -- may need to nuance conditional
		    (warn "Outside range or bad value")
		    )
		  )
	      
	      ))
	  ))
      hits
      )
    ))


;; read CSV

;; ask which days/times are free(er)
;; and/or
;; plot which days/times are more conflicted
 
